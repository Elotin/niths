<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd">
	
	<!-- Enable aop method interceptors -->
	<aop:aspectj-autoproxy />
	
	<!-- Declare http authorization and properties -->
	<!-- Enable security annotations, set session no none, secure the admin panel, enable custom filter -->
	<security:global-method-security
		pre-post-annotations="enabled" proxy-target-class="true" />
	<security:http create-session="stateless" use-expressions="true">
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" requires-channel="https" />
		<security:intercept-url pattern="/register/**" access="permitAll" requires-channel="https" />
		<security:intercept-url pattern="/**" access="permitAll" requires-channel="https" method="POST" />
		<security:intercept-url pattern="/**" access="permitAll" requires-channel="https" method="PUT" />
		<security:intercept-url pattern="/**" access="permitAll" requires-channel="https" method="DELETE" />
		<security:intercept-url pattern="/students/**" access="permitAll" requires-channel="https" method="GET" />
		<security:intercept-url pattern="/fadder/**" access="permitAll" requires-channel="https" method="GET" />
		
		<security:http-basic />
		<security:custom-filter ref="authfilter" after="BASIC_AUTH_FILTER" />
	</security:http>

	<!-- Authentication filter that handles requests if no Basic authorization header is provided-->
	<beans:bean id="authfilter" class="no.niths.security.RequestAuthenticationFilter">
		<beans:property name="authProvider" ref="reqAuthenticationManager" />
		<beans:property name="entryPoint" ref="authEntryPoint" />
	</beans:bean>
	
	<!-- Authentication manager for the authentication filter -->
	<beans:bean id="reqAuthenticationManager"
		class="no.niths.security.RequestAuthenticationProvider" />
	
	<!-- Authentication entry point for custom filter -->
	<beans:bean id="authEntryPoint"
		class="no.niths.security.RestAuthenticationEntryPoint" />
		
	<!-- Authentication manager -->
	<security:authentication-manager alias="authManager">
		<security:authentication-provider ref="reqAuthenticationManager"></security:authentication-provider>
		<security:authentication-provider
			user-service-ref="userDetailsService">
			<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

	<beans:bean
		class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"
		id="passwordEncoder">
		<beans:constructor-arg value="512" />
	</beans:bean>

	<!-- Security roles -->
	<security:user-service id="userDetailsService">
		<security:user name="admin"
			password="eb744e642692319a16da42b058e6e76c7c7e253ec37ef08e8200f80a68de03ee52eff70fc973398da526aad2dbe2c8833aa3dd21caa630cba95d47b002eeeac1"
			authorities="ROLE_ADMIN" />
	</security:user-service>
</beans:beans>